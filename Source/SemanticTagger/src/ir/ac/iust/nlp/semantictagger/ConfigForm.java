package ir.ac.iust.nlp.semantictagger;

import java.io.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Mojtaba Khallah
 */
public class ConfigForm extends javax.swing.JFrame {

    Tagger tagger;
    
    /**
     * Creates new form ConfigForm
     */
    public ConfigForm() {
        this(null);
    }
    
    public ConfigForm(Tagger tagger) {
        initComponents();
        
        this.tagger = tagger;
        
        txtInputFile.setText(System.getProperty("user.dir") + File.separator + 
                    "data" + File.separator + 
                    "input.conll");
        txtOutputPath.setText(System.getProperty("user.dir") + File.separator);
        
        setDrop();
    }
    
    private void setDrop() {
        FileDrop fd;
        fd = new FileDrop(null, txtInputFile, new FileDrop.Listener() {
            @Override
            public void filesDropped(java.io.File[] files) {
                if (files.length > 0) {
                    try {
                        boolean dropped = false;
                        for (int i = 0; i < files.length; i++) {
                            if (files[i].isFile()) {
                                txtInputFile.setText(files[i].getCanonicalPath());
                                dropped = true;
                                break;
                            }
                        }
                        if (dropped == false) {
                            JOptionPane.showMessageDialog(null, "File needed.");
                        }
                    } // end try
                    catch (java.io.IOException e) {
                    }
                }   // end for: through each dropped file
            }   // end filesDropped
        }); // end FileDrop.Listener
        
        fd = new FileDrop(null, txtOutputPath, new FileDrop.Listener() {
            @Override
            public void filesDropped(java.io.File[] files) {
                if (files.length > 0) {
                    try {
                        if (files[0].isFile()) {
                            files[0] = files[0].getParentFile();
                        }

                        txtOutputPath.setText(files[0].getCanonicalPath() + File.separator);
                    } // end try
                    catch (java.io.IOException e) {
                    }
                }   // end for: through each dropped file
            }   // end filesDropped
        }); // end FileDrop.Listener
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblInputFile = new javax.swing.JLabel();
        lblOutputPath = new javax.swing.JLabel();
        txtInputFile = new javax.swing.JTextField();
        txtOutputPath = new javax.swing.JTextField();
        btnOutputFile = new javax.swing.JButton();
        btnOutputPath = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setTitle("Configuration");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                Closing(evt);
            }
        });

        lblInputFile.setText("Input CoNLL File:");

        lblOutputPath.setText("Output Path:");

        txtInputFile.setEditable(false);

        txtOutputPath.setEditable(false);

        btnOutputFile.setText("...");
        btnOutputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputFileActionPerformed(evt);
            }
        });

        btnOutputPath.setText("...");
        btnOutputPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputPathActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblInputFile)
                            .addComponent(lblOutputPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtInputFile, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                            .addComponent(txtOutputPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnOutputPath, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnExit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInputFile)
                    .addComponent(btnOutputFile)
                    .addComponent(txtInputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOutputPath)
                    .addComponent(txtOutputPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOutputPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnExit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOutputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputFileActionPerformed
        txtInputFile.setText(showFileDialog(txtInputFile.getText(), false, null));
    }//GEN-LAST:event_btnOutputFileActionPerformed

    private void btnOutputPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputPathActionPerformed
        txtOutputPath.setText(showFileDialog(txtOutputPath.getText(), true, null));
    }//GEN-LAST:event_btnOutputPathActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        txtInputFile.setText("");
        txtOutputPath.setText("");
        Closing(null);
        tagger.setEnabled(true);
        tagger.setVisible(true);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            if (txtInputFile.getText().length() > 0 &&
                txtOutputPath.getText().length() > 0) {
                try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                             new FileOutputStream("config.txt", false), "UTF-8"))) {
                    writer.write("Input=" + txtInputFile.getText() + "\n");
                    writer.write("Output=" + txtOutputPath.getText() + "output_semantic.conll\n");
                    writer.write("Start=0\n");
                }

                Closing(null);
                tagger.start();
            }
        }
        catch(Exception e) {
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void Closing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_Closing
        txtInputFile.setText("");
        txtOutputPath.setText("");
        tagger.setEnabled(true);
        tagger.setVisible(true);
    }//GEN-LAST:event_Closing

    private String showFileDialog(String currentDir, boolean isFolder,
            FileNameExtensionFilter filter) {
        JFileChooser fc = new JFileChooser();
        if (currentDir.length() == 0) {
            fc.setCurrentDirectory(new java.io.File("."));
        } else {
            fc.setCurrentDirectory(new java.io.File(currentDir));
        }
        fc.setMultiSelectionEnabled(false);
        if (filter != null) {
            fc.setFileFilter(filter);
        }
        String title = "Select File";
        if (isFolder == true) {
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            title = "Select Folder";
        }

        if (fc.showDialog(this, title) == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            String path = file.getPath();
            if (isFolder == true && path.lastIndexOf(File.separator) != path.length() - 1) {
                path = path + File.separator;
            }

            return path;
        } else {
            return currentDir;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConfigForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ConfigForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnOutputFile;
    private javax.swing.JButton btnOutputPath;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel lblInputFile;
    private javax.swing.JLabel lblOutputPath;
    private javax.swing.JTextField txtInputFile;
    private javax.swing.JTextField txtOutputPath;
    // End of variables declaration//GEN-END:variables
}